\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{eplqa}[2015/03/06 EPL QA package]

\newcommand{\basedir}{}
\DeclareOption{eval}{\renewcommand{\basedir}{../../../}}

\ProcessOptions\relax

\usepackage{tikzpagenodes}
\usetikzlibrary{calc, arrows}

\newcommand{\SolutionLabel}{Solution \IfLanguageName{english}{to}{à} \QAlabel~\theQA}

\RequirePackage{etoolbox}

\newtoggle{eplqa@waitingforsolution}
\newtoggle{eplqa@waitingforstatement}

\newcommand{\@help@rtfm}{\IfLanguageName{english}{Read other documents to see how we use solutions}{Consultez d'autres documents pour voir comment on utilise les solutions}}
\newcommand{\@checksol@errmsg}{\IfLanguageName{english}{%
		Unexpected (no)solution here; possible explanation: double solution, or missing \protect\section\space to define statement
	}{%
		Utilisation de (no)solution au mauvais endroit; possible cause: double solution ou \protect\section\space manquante pour definir l'enonce
}}
\newcommand{\@checkstatmt@errmsg}[2]{\IfLanguageName{english}{%
		Unexpected #1 here; did you miss a \protect\begin{solution}\space ... \protect\end{solution}\space or a \protect\nosolution\space at the previous question?
	}{%
		#2 inattendu ici; n'avez-vous pas oublie un \protect\begin{solution}\space ... \protect\end{solution}\space ou un \protect\nosolution\space a la question precedente ?
}}
\newcommand{\@checksolution}{%
	\iftoggle{eplqa@waitingforsolution}{% OK: it defined and set to true
		\global\togglefalse{eplqa@waitingforsolution}
		\global\toggletrue{eplqa@waitingforstatement}
	}{% KO: undefined, or more probably not set to true
		\PackageError{eplqa}{\@checksol@errmsg}{\@help@rtfm}
	}
}
\newcommand{\@checkstatement}{%
	\iftoggle{eplqa@waitingforstatement}{%
		\global\togglefalse{eplqa@waitingforstatement}
		\global\toggletrue{eplqa@waitingforsolution}
	}{%
		\PackageError{eplqa}{\@checkstatmt@errmsg{statement}{Enonce}}{\@help@rtfm}
	}
}

\usepackage[framemethod=tikz]{mdframed}
% greyarrow has much better handling of page breaks, see the link on stackoverflow for more info
\def\SolStyle{greyarrow}
\ifthenelse{\isundefined{\SolStyle}}{\def\SolStyle{greyarrow}}{}
\ifthenelse{\equal{\SolStyle}{greyarrow}}
{
  \input{\basedir../../../greyarrow.tex}
}
{
  \input{\basedir../../../boxes.tex}
}

\RequirePackage{verbatim}
\ifthenelse{\isundefined{\Sol}}{\def\Sol{true}}{}
\ifthenelse{\equal{\Sol}{false}}
{
	\newenvironment{solution}{\expandafter\comment}{\expandafter\endcomment}
}
{
	\newmdenv[style=mysquare]{solution}
}

\NewDocumentEnvironment{solfig}{mm}
{\begin{center}\begin{minipage}{\textwidth}\centering\hspace{1em}}
{\hspace{1em}\captionof{figure}{#2}\label{fig:#1}\end{minipage}\end{center}}

% \comment and \endcomment of the environment solution
% does not work with newcomment
\newcommand{\missingsolutiontext}[1]{%
\IfLanguageName{english}{Sadly}{Malheureusement},
#1
\IfLanguageName{english}
{does not yet have a solution.
You are encouraged to submit one to the following address}
{n'a pas encore de solution.
Vous êtes encouragés à en soumettre une à l'adresse suivante}
\begin{center}
  \url{https://github.com/gp2mv3/Syntheses}
\end{center}
\IfLanguageName{english}{or by mail}{ou par mail}.
}
% \nosubsolution: used in itemize/enumerate
% TODO check if correctly used inside an itemize/enumerate + the question is also an itemize/enumerate and has the same number of items
\newcommand{\nosubsolution}{
\missingsolutiontext{\IfLanguageName{english}{this sub-question}{cette sous-question}}
}

% \nosolution: used to mark that a statement doesn't have a solution for now.
\ifthenelse{\equal{\Sol}{false}}
{\newcommand{\nosolution}{}}
{
\newcommand{\nosolution}{%
\begin{solution}
\missingsolutiontext{\QAlabel~\theQA}
\end{solution}
}
}

% \nostatement: used to mark that a question doesn't have a statement yet.
% We may have a solution nonetheless, so we must enforce the use of solution/nosolution
% FIXME: if this semantic is not correct, it is possible to use the two toggles to implement more complex conditions.
% Ex: nostatement would deactivate waitingforsolution,
% then solution would only check that we are not waiting for a statement already,
% and would deactivate waitingforsolution nonetheless, and set waitingforstatement,
% and as the statements check that we have waitingforsolution disabled, and waitingforstatement enabled, then it's OK
\newcommand{\nostatement}{
\IfLanguageName{english}{Sadly}{Malheureusement},
\QAlabel~\theQA{}
\IfLanguageName{english}
{does not yet have a statement.
You are encouraged to submit one to the following address}
{n'a pas encore d'énoncé.
Vous êtes encouragés à en soumettre un à l'adresse suivante}
\begin{center}
  \url{https://github.com/gp2mv3/Syntheses}
\end{center}
\IfLanguageName{english}{or by mail}{ou par mail}.
}

% MCQ support -- maybe should be split in another package?
\RequirePackage{longtable} % so that table can be over several pages
\renewcommand{\arraystretch}{1.5} % to bring space to the table

\newenvironment{mcqs}
{\begin{longtable}{|p{13cm}|l|}}
{\hline\end{longtable}}

\newcommand{\mcq}[3]{
  \hline
  #1 &
  \ifthenelse{\equal{\Sol}{false}}
  {}
  {
    \ifthenelse{\equal{#2}{1} \OR \equal{#2}{true} \OR \equal{#2}{True} \OR \equal{#2}{TRUE} \OR \equal{#2}{vrai} \OR \equal{#2}{Vrai} \OR \equal{#2}{VRAI}}
    {\IfLanguageName{english}{True}{Vrai}}
    {\ifthenelse{\equal{#2}{0} \OR \equal{#2}{false} \OR \equal{#2}{False} \OR \equal{#2}{FALSE} \OR \equal{#2}{faux} \OR \equal{#2}{Faux} \OR \equal{#2}{FAUX}}
      {\IfLanguageName{english}{False}{Faux}}
      {\IfLanguageName{english}{Open}{Ouvert}}
    }
  \\
  \hline
  \multicolumn{2}{|p{\textwidth}|}{\emph{Justification:}
    \ifthenelse{\equal{#3}{}}{TODO}{#3}
  }}\\
}

%\AtBeginDocument{%
\toggletrue{eplqa@waitingforstatement}
\togglefalse{eplqa@waitingforsolution}
%}

\endinput
